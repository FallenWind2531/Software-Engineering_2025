package com.Main.web.exam;

import com.Main.entity.StudentAnswerResult;
import com.Main.service.StudentAnswerResultService;
import com.Main.web.exam.StudentAnswerResultController;
import org.hsqldb.jdbc.JDBCDataSource;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.jdbc.core.JdbcTemplate;
import java.util.Arrays;
import java.util.List;

import javax.sql.DataSource;

import static org.junit.jupiter.api.Assertions.*;

public class StudentAnswerResultControllerTest {

    private StudentAnswerResultController controller;
    private StudentAnswerResultService service;
    private JdbcTemplate jdbcTemplate;

    @BeforeEach
    void setUp() {
        JDBCDataSource ds = new JDBCDataSource();
        ds.setUrl("jdbc:hsqldb:mem:testdb");
        ds.setUser("sa");
        ds.setPassword("");
        DataSource dataSource = ds;

        jdbcTemplate = new JdbcTemplate(dataSource);

        jdbcTemplate.execute("DROP TABLE IF EXISTS question_bank");
        jdbcTemplate.execute("DROP TABLE IF EXISTS student_answer_result");

        jdbcTemplate.execute(
            "CREATE TABLE question_bank (" +
            "  question_id INTEGER PRIMARY KEY, " +
            "  answer VARCHAR(255), " +
            "  score INTEGER" +
            ")");

        jdbcTemplate.execute(
            "CREATE TABLE student_answer_result (" +
            "  result_id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY, " +
            "  test_id INTEGER, " +
            "  student_id INTEGER, " +
            "  question_id INTEGER, " +
            "  student_answer VARCHAR(255), " +
            "  is_correct BOOLEAN, " +
            "  score_obtained INTEGER, " +
            "  answer_time TIMESTAMP" +
            ")");

        service = new StudentAnswerResultService();
        service.setJdbcTemplate(jdbcTemplate);

        controller = new StudentAnswerResultController();
        controller.setService(service);
        controller.setJdbcTemplate(jdbcTemplate);
    }

    @Test
    void submit_createsAndReturnsResult() {
        jdbcTemplate.update("INSERT INTO question_bank (question_id, answer, score) VALUES (?,?,?)", 1, "A", 5);

        StudentAnswerResult payload = new StudentAnswerResult();
        payload.setTestId(2);
        payload.setStudentId(3);
        payload.setQuestionId(1);
        payload.setStudentAnswer("A");

        StudentAnswerResult result = controller.submit(payload);

        assertNotNull(result.getResultId());
        assertEquals(2, result.getTestId());
        assertEquals(3, result.getStudentId());
        assertEquals(1, result.getQuestionId());
        assertEquals("A", result.getStudentAnswer());
        assertEquals(Boolean.TRUE, result.getIsCorrect());
        assertEquals(5, result.getScoreObtained());
        assertNotNull(result.getAnswerTime());
    }

    @Test
    void submit_updatesExistingResult() {
        jdbcTemplate.update("INSERT INTO question_bank (question_id, answer, score) VALUES (?,?,?)", 1, "A", 5);

        StudentAnswerResult payload = new StudentAnswerResult();
        payload.setTestId(2);
        payload.setStudentId(3);
        payload.setQuestionId(1);
        payload.setStudentAnswer("A");

        StudentAnswerResult created = controller.submit(payload);

        payload.setStudentAnswer("B");
        StudentAnswerResult updated = controller.submit(payload);

        assertEquals(created.getResultId(), updated.getResultId());
        assertEquals(Boolean.FALSE, updated.getIsCorrect());
        assertEquals(0, updated.getScoreObtained());
    }

    @Test
    void submitBatch_createsMultipleResults() {
        jdbcTemplate.update("INSERT INTO question_bank (question_id, answer, score) VALUES (?,?,?)", 1, "A", 5);
        jdbcTemplate.update("INSERT INTO question_bank (question_id, answer, score) VALUES (?,?,?)", 2, "B", 10);

        StudentAnswerResult r1 = new StudentAnswerResult();
        r1.setTestId(1);
        r1.setStudentId(2);
        r1.setQuestionId(1);
        r1.setStudentAnswer("A");

        StudentAnswerResult r2 = new StudentAnswerResult();
        r2.setTestId(1);
        r2.setStudentId(3);
        r2.setQuestionId(2);
        r2.setStudentAnswer("C");

        List<StudentAnswerResult> results = controller.submitBatch(Arrays.asList(r1, r2));

        assertEquals(2, results.size());

        StudentAnswerResult res1 = results.get(0);
        assertEquals(Boolean.TRUE, res1.getIsCorrect());
        assertEquals(5, res1.getScoreObtained());

        StudentAnswerResult res2 = results.get(1);
        assertEquals(Boolean.FALSE, res2.getIsCorrect());
        assertEquals(0, res2.getScoreObtained());
    }
}
